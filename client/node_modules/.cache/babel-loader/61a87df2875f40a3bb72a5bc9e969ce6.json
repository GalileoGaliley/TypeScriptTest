{"ast":null,"code":"var _jsxFileName = \"/Users/nicole/TypeScriptTest/client/src/Pages/Account.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { observer } from \"mobx-react-lite\";\nimport ContactItem from \"../Components/ContactItem\";\nimport ModalState from \"../Components/ModalState\";\nimport { getAllContacts } from \"../HTTP/contactAPI\";\nimport { Col, Form, Row } from \"react-bootstrap\";\nimport { Context } from \"../index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Account = _s(observer(_c = _s(() => {\n  _s();\n\n  const [search, setSearch] = useState('');\n  const context = useContext(Context);\n  let user = context.us.User;\n  let contacts = context.con;\n  let token = user === null || user === void 0 ? void 0 : user.token;\n\n  function SortArray(itemX, itemY, arr, result) {\n    result.push(itemX);\n    return 0;\n  }\n\n  const Search = () => {};\n\n  useEffect(() => {\n    if (token) {\n      getAllContacts(token).then(data => {\n        let arr = data.rows;\n\n        function sort(a, b) {\n          if (a.name < b.name) {\n            return -1;\n          }\n\n          if (a.name > b.name) {\n            return 1;\n          }\n\n          return 0;\n        }\n\n        contacts.setContact(arr.sort(sort));\n        console.log(contacts.Contact);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'accountPage',\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'account ',\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              md: 5,\n              className: 'w-auto',\n              children: [/*#__PURE__*/_jsxDEV(Col, {\n                className: 'iconSearch'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                value: search,\n                onChange: event => {\n                  setSearch(event.target.value);\n                },\n                placeholder: 'Введите имя контакта',\n                type: 'text'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this), contacts.Contact ? contacts.Contact.map(item => /*#__PURE__*/_jsxDEV(ContactItem, {\n          name: item.name,\n          id: item.id,\n          lastname: item.lastname,\n          phone: item.phone,\n          address: item.address\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(ModalState, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}, \"Pe7WktQ9bxibV+42w0UsgZThgaw=\")), \"Pe7WktQ9bxibV+42w0UsgZThgaw=\");\n\n_c2 = Account;\nexport default Account;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Account$observer\");\n$RefreshReg$(_c2, \"Account\");","map":{"version":3,"sources":["/Users/nicole/TypeScriptTest/client/src/Pages/Account.tsx"],"names":["React","useContext","useEffect","useState","observer","ContactItem","ModalState","getAllContacts","Col","Form","Row","Context","Account","search","setSearch","context","user","us","User","contacts","con","token","SortArray","itemX","itemY","arr","result","push","Search","then","data","rows","sort","a","b","name","setContact","console","log","Contact","event","target","value","map","item","id","lastname","phone","address"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport ContactItem from \"../Components/ContactItem\";\nimport ModalState from \"../Components/ModalState\";\nimport {getAllContacts} from \"../HTTP/contactAPI\";\nimport {Contact} from \"../Store/ContactsStore\"\n\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\nimport {Context} from \"../index\";\nconst Account = observer(() => {\n    const [search,setSearch] = useState<string>('')\n    const context = useContext(Context);\n    let user = context.us.User;\n    let contacts = context.con\n    let token = user?.token;\n    function SortArray(itemX:Contact,itemY:Contact,arr:Contact[] , result:Contact[]):number{\n        result.push(itemX)\n        return 0;\n    }\n    const Search = ()=>{\n\n    }\n    useEffect(()=>{\n        if (token){\n            getAllContacts(token).then((data)=>{\n                let arr:Contact[] = data.rows;\n                function sort( a:Contact, b:Contact ) {\n                    if ( a.name < b.name ){\n                        return -1;\n                    }\n                    if ( a.name > b.name ){\n                        return 1;\n                    }\n                    return 0;\n                }\n\n                contacts.setContact(arr.sort(sort))\n                console.log(contacts.Contact)\n            })\n        }\n\n    },[])\n        return (\n            <>\n                <div className={'accountPage'}>\n                    <div className={'account '}>\n                        <Row>\n                            <Form>\n\n                                <Col md={5} className={'w-auto'}>\n                                    <Col className={'iconSearch'}>\n\n                                    </Col>\n                                    <Form.Control  value={search} onChange={(event)=> {setSearch(event.target.value)}} placeholder={'Введите имя контакта'} type={'text'} />\n                                </Col>\n                            </Form>\n                        </Row>\n                        {contacts.Contact?contacts.Contact.map((item:Contact) =>\n\n                            <ContactItem key={item.id} name={item.name} id={item.id} lastname={item.lastname} phone={item.phone} address={item.address}/>\n\n                        ):<></>}\n                        <ModalState/>\n                    </div>\n                </div>\n\n            </>\n        );\n\n\n});\n\nexport default Account;"]},"metadata":{},"sourceType":"module"}