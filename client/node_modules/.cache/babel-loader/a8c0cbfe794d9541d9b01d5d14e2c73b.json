{"ast":null,"code":"var _jsxFileName = \"/Users/nicole/TypeScriptTest/client/src/Pages/Account.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport { observer } from \"mobx-react-lite\";\nimport ContactItem from \"../Components/ContactItem\";\nimport ModalState from \"../Components/ModalState\";\nimport { getAllContacts } from \"../HTTP/contactAPI\";\nimport { Context } from \"../index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Account = _s(observer(_c = _s(() => {\n  _s();\n\n  const context = useContext(Context);\n  let user = context.us.User;\n  let contacts = context.con;\n  let token = user === null || user === void 0 ? void 0 : user.token;\n\n  function SortArray(itemX, itemY, arr, result) {\n    result.push(itemX);\n    return 0;\n  }\n\n  useEffect(() => {\n    if (token) {\n      getAllContacts(token).then(data => {\n        let arr = data.rows;\n        let result = [];\n\n        for (let i = 0; i < arr.length; i++) {\n          let mainItem = arr[i];\n\n          for (let k = 0; k < arr.length; k++) {\n            if (arr[i] > arr[k]) {\n              mainItem = arr[k];\n            }\n          }\n\n          result.push(mainItem);\n          console.log(result);\n        }\n\n        contacts.setContact(data.rows);\n        console.log(contacts.Contact);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'accountPage',\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'account ',\n        children: [contacts.Contact ? contacts.Contact.map(item => /*#__PURE__*/_jsxDEV(ContactItem, {\n          name: item.name,\n          id: item.id,\n          lastname: item.lastname,\n          phone: item.phone,\n          address: item.address\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(ModalState, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}, \"wqnYpdjMkT3eDhbBjwDmfBO/TFg=\")), \"wqnYpdjMkT3eDhbBjwDmfBO/TFg=\");\n\n_c2 = Account;\nexport default Account;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Account$observer\");\n$RefreshReg$(_c2, \"Account\");","map":{"version":3,"sources":["/Users/nicole/TypeScriptTest/client/src/Pages/Account.tsx"],"names":["React","useContext","useEffect","observer","ContactItem","ModalState","getAllContacts","Context","Account","context","user","us","User","contacts","con","token","SortArray","itemX","itemY","arr","result","push","then","data","rows","i","length","mainItem","k","console","log","setContact","Contact","map","item","name","id","lastname","phone","address"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,SAA3B,QAAqD,OAArD;AACA,SAAQC,QAAR,QAAuB,iBAAvB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAAQC,cAAR,QAA6B,oBAA7B;AAEA,SAAQC,OAAR,QAAsB,UAAtB;;;;AACA,MAAMC,OAAO,MAAGL,QAAQ,SAAC,MAAM;AAAA;;AAE3B,QAAMM,OAAO,GAAGR,UAAU,CAACM,OAAD,CAA1B;AACA,MAAIG,IAAI,GAAGD,OAAO,CAACE,EAAR,CAAWC,IAAtB;AACA,MAAIC,QAAQ,GAAGJ,OAAO,CAACK,GAAvB;AACA,MAAIC,KAAK,GAAGL,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEK,KAAlB;;AACA,WAASC,SAAT,CAAmBC,KAAnB,EAAiCC,KAAjC,EAA+CC,GAA/C,EAA+DC,MAA/D,EAAuF;AACnFA,IAAAA,MAAM,CAACC,IAAP,CAAYJ,KAAZ;AACA,WAAO,CAAP;AACH;;AACDf,EAAAA,SAAS,CAAC,MAAI;AACV,QAAIa,KAAJ,EAAU;AACNT,MAAAA,cAAc,CAACS,KAAD,CAAd,CAAsBO,IAAtB,CAA4BC,IAAD,IAAQ;AAC/B,YAAIJ,GAAa,GAAGI,IAAI,CAACC,IAAzB;AACA,YAAIJ,MAAgB,GAAG,EAAvB;;AACA,aAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACO,MAAxB,EAA+BD,CAAC,EAAhC,EAAmC;AAC/B,cAAIE,QAAgB,GAAGR,GAAG,CAACM,CAAD,CAA1B;;AACA,eAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,GAAG,CAACO,MAAxB,EAA+BE,CAAC,EAAhC,EAAmC;AAC/B,gBAAGT,GAAG,CAACM,CAAD,CAAH,GAASN,GAAG,CAACS,CAAD,CAAf,EAAmB;AACfD,cAAAA,QAAQ,GAAGR,GAAG,CAACS,CAAD,CAAd;AACH;AACJ;;AACDR,UAAAA,MAAM,CAACC,IAAP,CAAYM,QAAZ;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACH;;AAEDP,QAAAA,QAAQ,CAACkB,UAAT,CAAoBR,IAAI,CAACC,IAAzB;AACAK,QAAAA,OAAO,CAACC,GAAR,CAAYjB,QAAQ,CAACmB,OAArB;AACH,OAhBD;AAiBH;AAEJ,GArBQ,EAqBP,EArBO,CAAT;AAsBI,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAE,aAAhB;AAAA,6BACI;AAAK,QAAA,SAAS,EAAE,UAAhB;AAAA,mBACKnB,QAAQ,CAACmB,OAAT,GAAiBnB,QAAQ,CAACmB,OAAT,CAAiBC,GAAjB,CAAsBC,IAAD,iBAEnC,QAAC,WAAD;AAA2B,UAAA,IAAI,EAAEA,IAAI,CAACC,IAAtC;AAA4C,UAAA,EAAE,EAAED,IAAI,CAACE,EAArD;AAAyD,UAAA,QAAQ,EAAEF,IAAI,CAACG,QAAxE;AAAkF,UAAA,KAAK,EAAEH,IAAI,CAACI,KAA9F;AAAqG,UAAA,OAAO,EAAEJ,IAAI,CAACK;AAAnH,WAAkBL,IAAI,CAACE,EAAvB;AAAA;AAAA;AAAA;AAAA,gBAFc,CAAjB,gBAIC,qCALN,eAMI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAiBP,CAjDuB,kCAAX,iCAAb;;MAAM5B,O;AAmDN,eAAeA,OAAf","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport ContactItem from \"../Components/ContactItem\";\nimport ModalState from \"../Components/ModalState\";\nimport {getAllContacts} from \"../HTTP/contactAPI\";\nimport {Contact} from \"../Store/ContactsStore\"\nimport {Context} from \"../index\";\nconst Account = observer(() => {\n\n    const context = useContext(Context);\n    let user = context.us.User;\n    let contacts = context.con\n    let token = user?.token;\n    function SortArray(itemX:Contact,itemY:Contact,arr:Contact[] , result:Contact[]):number{\n        result.push(itemX)\n        return 0;\n    }\n    useEffect(()=>{\n        if (token){\n            getAllContacts(token).then((data)=>{\n                let arr:Contact[] = data.rows;\n                let result:Contact[] = [];\n                for (let i = 0; i < arr.length;i++){\n                    let mainItem:Contact = arr[i];\n                    for (let k = 0; k < arr.length;k++){\n                        if(arr[i] > arr[k]){\n                            mainItem = arr[k];\n                        }\n                    }\n                    result.push(mainItem);\n                    console.log(result)\n                }\n\n                contacts.setContact(data.rows)\n                console.log(contacts.Contact)\n            })\n        }\n\n    },[])\n        return (\n            <>\n                <div className={'accountPage'}>\n                    <div className={'account '}>\n                        {contacts.Contact?contacts.Contact.map((item:Contact) =>\n\n                            <ContactItem key={item.id} name={item.name} id={item.id} lastname={item.lastname} phone={item.phone} address={item.address}/>\n\n                        ):<></>}\n                        <ModalState/>\n                    </div>\n                </div>\n\n            </>\n        );\n\n\n});\n\nexport default Account;"]},"metadata":{},"sourceType":"module"}