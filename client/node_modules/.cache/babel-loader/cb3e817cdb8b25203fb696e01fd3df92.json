{"ast":null,"code":"var _jsxFileName = \"/Users/nicole/TypeScriptTest/client/src/Pages/Account.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { observer } from \"mobx-react-lite\";\nimport ContactItem from \"../Components/ContactItem\";\nimport ModalState from \"../Components/ModalState\";\nimport { getAllContacts } from \"../HTTP/contactAPI\";\nimport { Col, Form, Row } from \"react-bootstrap\";\nimport { Context } from \"../index\";\nimport SearchElem from \"../Components/searchElem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Account = _s(observer(_c = _s(() => {\n  _s();\n\n  const [search, setSearch] = useState('');\n  const context = useContext(Context);\n  let user = context.us.User;\n  console.log(context);\n  let contacts = context.con;\n  let [token, setToken] = useState(user === null || user === void 0 ? void 0 : user.token);\n  let [state, setState] = useState(0);\n  let [contactsState, setContactsState] = useState(contacts.Contact);\n  const [middlewareArr, setMiddlewareArr] = useState([]);\n\n  const Search = () => {\n    let arr = contacts.Contact;\n    let retArr = [];\n\n    if (arr) {\n      arr.map((item, index) => {\n        let searching = search.toLowerCase();\n        let maySearchable = item.name.toLowerCase();\n\n        if (maySearchable.includes(searching)) {\n          retArr.push(item);\n          console.log(item);\n        }\n      });\n    }\n\n    console.log(search);\n\n    if (search == undefined) {\n      retArr = [];\n      setMiddlewareArr(retArr);\n    }\n\n    setMiddlewareArr(retArr);\n  };\n\n  useEffect(() => {\n    let tok = localStorage.getItem(\"token\");\n\n    if (tok) {\n      setToken(tok);\n    }\n  }, []);\n  useEffect(() => {\n    if (token) {\n      getAllContacts(token).then(data => {\n        let arr = data.rows;\n\n        function sort(a, b) {\n          if (a.name < b.name) {\n            return -1;\n          }\n\n          if (a.name > b.name) {\n            return 1;\n          }\n\n          return 0;\n        }\n\n        contacts.setContact(arr.sort(sort));\n        setContactsState(contacts.Contact);\n      });\n    } else {}\n\n    console.log('logloglog');\n  }, [token, state]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'accountPage',\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'account ',\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          className: 'w-100',\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              className: 'w-auto d-flex justify-content-center align-items-center',\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: 'iconSearch mr-5'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: 'd-flex flex-column',\n                children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n                  onInput: event => {\n                    console.log(event);\n                    console.log(search);\n                    Search();\n                  },\n                  className: 'w-auto',\n                  value: search,\n                  placeholder: 'Введите имя контакта',\n                  type: 'text'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: 'searchWindow',\n                  children: middlewareArr ? middlewareArr.map((item, index) => /*#__PURE__*/_jsxDEV(SearchElem, {\n                    name: item.name,\n                    id: item.id,\n                    lastname: item.lastname,\n                    phone: item.phone\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 49\n                  }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), contacts.Contact ? contactsState === null || contactsState === void 0 ? void 0 : contactsState.map(item => /*#__PURE__*/_jsxDEV(ContactItem, {\n          contact: item,\n          fun: () => {\n            setState(state += 1);\n            return;\n          }\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(ModalState, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}, \"kgIwXdRMtmUUMxy/mdmS/SfKWDc=\")), \"kgIwXdRMtmUUMxy/mdmS/SfKWDc=\");\n\n_c2 = Account;\nexport default Account;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Account$observer\");\n$RefreshReg$(_c2, \"Account\");","map":{"version":3,"sources":["/Users/nicole/TypeScriptTest/client/src/Pages/Account.tsx"],"names":["React","useContext","useEffect","useState","observer","ContactItem","ModalState","getAllContacts","Col","Form","Row","Context","SearchElem","Account","search","setSearch","context","user","us","User","console","log","contacts","con","token","setToken","state","setState","contactsState","setContactsState","Contact","middlewareArr","setMiddlewareArr","Search","arr","retArr","map","item","index","searching","toLowerCase","maySearchable","name","includes","push","undefined","tok","localStorage","getItem","then","data","rows","sort","a","b","setContact","event","id","lastname","phone"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport ContactItem from \"../Components/ContactItem\";\nimport ModalState from \"../Components/ModalState\";\nimport {getAllContacts} from \"../HTTP/contactAPI\";\nimport {Contact} from \"../Store/ContactsStore\"\n\nimport {Button, Col, Form, Row} from \"react-bootstrap\";\nimport {Context} from \"../index\";\nimport SearchElem from \"../Components/searchElem\";\n\n\nconst Account = observer(() => {\n    const [search,setSearch] = useState<string>('')\n    const context = useContext(Context);\n    let user = context.us.User;\n    console.log(context)\n    let contacts = context.con\n    let [token, setToken] = useState(user?.token)\n    let [state, setState] = useState<number>(0)\n    let [contactsState, setContactsState] = useState(contacts.Contact)\n    const [middlewareArr,setMiddlewareArr] = useState<Contact[]>([])\n    const Search = ()=>{\n        let arr:Contact[]|undefined = contacts.Contact;\n        let retArr:Contact[] = [];\n        if (arr){\n            arr.map((item,index)=>{\n                let searching = search.toLowerCase();\n                let maySearchable = item.name.toLowerCase();\n                if (maySearchable.includes(searching)){\n                    retArr.push(item);\n                    console.log(item)\n                }\n\n            })\n        }\n        console.log(search)\n        if(search == undefined){\n            retArr = []\n            setMiddlewareArr(retArr)\n        }\n        setMiddlewareArr(retArr)\n    }\n    useEffect(()=>{\n        let tok = localStorage.getItem(\"token\")\n        if (tok){\n            setToken(tok);\n        }\n\n    },[])\n    useEffect(()=>{\n        if (token){\n            getAllContacts(token).then((data)=>{\n                let arr:Contact[] = data.rows;\n                function sort( a:Contact, b:Contact ) {\n                    if ( a.name < b.name ){\n                        return -1;\n                    }\n                    if ( a.name > b.name ){\n                        return 1;\n                    }\n                    return 0;\n                }\n\n                contacts.setContact(arr.sort(sort))\n\n                setContactsState(contacts.Contact)\n            })\n        }else {\n\n        }\n        console.log('logloglog')\n\n    },[token, state])\n        return (\n            <>\n                <div className={'accountPage'}>\n                    <div className={'account '}>\n                        <Row className={'w-100'}>\n                            <Form>\n\n                                <Col md={6} className={'w-auto d-flex justify-content-center align-items-center'}>\n                                    <div className={'iconSearch mr-5'}>\n\n                                    </div>\n                                    <div className={'d-flex flex-column'}>\n                                        <Form.Control onInput={(event)=> {\n                                            console.log(event);\n                                            console.log(search); Search();}} className={'w-auto'} value={search}  placeholder={'Введите имя контакта'} type={'text'} />\n                                        <div className={'searchWindow'}>\n                                            {middlewareArr?middlewareArr.map((item:Contact, index) =>\n                                                <SearchElem key={index} name={item.name} id={item.id} lastname={item.lastname} phone={item.phone} />\n                                            ):<></>}\n                                        </div>\n                                    </div>\n\n\n\n                                </Col>\n\n                            </Form>\n                        </Row>\n\n                        {contacts.Contact?contactsState?.map((item:Contact) =>\n\n                            <ContactItem key={item.id} contact={item} fun={()=>{setState(state+=1); return}}/>\n\n                        ):<></>}\n                        <ModalState/>\n                    </div>\n                </div>\n\n            </>\n        );\n\n\n});\n\nexport default Account;"]},"metadata":{},"sourceType":"module"}